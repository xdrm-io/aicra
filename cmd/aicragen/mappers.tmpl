package {{ .Package }}

import (
	"net/http"
	aicraValidator "github.com/xdrm-io/aicra/validator"
	{{- range $alias, $path := .Imports }}
	{{ $alias }} "{{ $path }}"
	{{- end }}
)

type mapper struct {
	impl Server
	validators []aicraValidator.Type
}

{{ range .Endpoints }}
func (m mapper) {{ .Name }}(w http.ResponseWriter, r *http.Request) {
	in, err := runtime.Parse(r, validators)
	if err != nil {
		runtime.Respond(w, nil, err)
		return
	}
	req := {{.Name}}Req{
		{{- range $id, $param := .Input }}
		{{- if not $param.Optional }}
		{{ $param.Name }}: in["{{$id}}"].({{$param.Type}}),
		{{- end }}
		{{- end }}
	}
	{{- range $id, $param := .Input }}
	{{- if $param.Optional }}
	if v, ok := in["{{$id}}"] ; ok {
		req.{{$param.Name}} = &(v.({{ $param.Type }}))
	}
	{{- end }}
	{{- end }}

	res, err := m.impl.{{ .Name }}(r.Context(), req)
	{{- if ne (len .Output) 0 }}
	out := map[string]interface{}{
	{{- range $id, $param := .Output }}
		"{{$id}}": res.{{$param.Name}},
	{{- end }}
	}
	runtime.Respond(w, out, err)
	{{- else  }}
	runtime.Respond(w, nil, err)
	{{- end }}
}
{{ end }}
