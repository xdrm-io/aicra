package {{ .Package }}

import (
	"net/http"
	"github.com/xdrm-io/aicra/runtime"
)

type mapper struct {
	impl Server
}

{{ range .Endpoints }}
{{- $inStruct  := printf "%sReq" .Name }}
{{- $outStruct := printf "%sRes" .Name }}
func (m mapper) {{ .Name }}(w http.ResponseWriter, r *http.Request) {
	var (
		err error
		req {{$inStruct}}
	)
	{{- if ne (len .Input) 0 }}

	{{- range $name, $p := .Input }}
	{{- if eq $p.Kind 0 }}
	req.{{.Rename}}, err = runtime.ExtractURI[{{getType .ValidatorName $.Validators}}](r, {{.ExtractName}}, {{ getGetter .ValidatorName $.Validators }}({{ params .ValidatorParams }}))
	if err != nil {
		runtime.Respond(w, nil, err)
		return
	}
	{{- end }}
	{{- end }}

	{{- range $name, $p := .Input }}
	{{- if eq $p.Kind 1 }}

	{{- if .Optional }}
	In{{.Rename}}, err := runtime.ExtractQuery[{{getType .ValidatorName $.Validators}}](r, "{{.ExtractName}}", {{ getGetter .ValidatorName $.Validators }}({{ params .ValidatorParams }}))
	if err != nil && err != runtime.ErrMissingParam {
		runtime.Respond(w, nil, err)
		return
	}
	if err == nil {
		req.{{.Rename}} = &In{{.Rename}}
	}
	{{- else }}
	req.{{.Rename}}, err = runtime.ExtractQuery[{{getType .ValidatorName $.Validators}}](r, "{{.ExtractName}}", {{ getGetter .ValidatorName $.Validators }}({{ params .ValidatorParams }}))
	if err != nil {
		runtime.Respond(w, nil, err)
		return
	}
	{{- end }}

	{{- end }}
	{{- end }}

	{{- $hasForm := false }}
	{{- range $name, $p := .Input }}
	{{- if eq $p.Kind 2 }}
	{{- if eq $hasForm false }}
	form, err := runtime.ParseForm(r)
	if err != nil {
		runtime.Respond(w, nil, err)
		return
	}
	{{- end }}
	{{- if .Optional }}
	In{{.Rename}}, err := runtime.ExtractForm[{{getType .ValidatorName $.Validators}}](form, "{{.ExtractName}}", {{ getGetter .ValidatorName $.Validators }}({{ params .ValidatorParams }}))
	if err != nil && err != runtime.ErrMissingParam {
		runtime.Respond(w, nil, err)
		return
	}
	if err == nil {
		req.{{.Rename}} = &In{{.Rename}}
	}
	{{- else }}
	req.{{.Rename}}, err = runtime.ExtractForm[{{getType .ValidatorName $.Validators}}](form, "{{.ExtractName}}", {{ getGetter .ValidatorName $.Validators }}({{ params .ValidatorParams }}))
	if err != nil {
		runtime.Respond(w, nil, err)
		return
	}
	{{- end }}
	{{- $hasForm = true }}
	{{- end }}
	{{- end }}
	{{- end }}

	{{- if ne (len .Output) 0 }}

	res, err := m.impl.{{ .Name }}(r.Context(), req)
	var out map[string]any
	if res != nil {
		out = map[string]any{
			{{- range $name, $p := .Output }}
			"{{$name}}": res.{{$p.Rename}},
			{{- end }}
		}
	}
	runtime.Respond(w, out, err)

	{{- else  }}

	{{- if ne (len .Input) 0 }}
	_, err = m.impl.{{ .Name }}(r.Context(), req)
	{{- else }}
	_, err := m.impl.{{ .Name }}(r.Context(), {{$inStruct}}{})
	{{- end }}
	runtime.Respond(w, nil, err)

	{{- end }}
}
{{ end }}